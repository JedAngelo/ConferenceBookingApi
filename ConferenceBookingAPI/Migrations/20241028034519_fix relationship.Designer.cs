// <auto-generated />
using System;
using ConferenceBookingAPI.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConferenceBookingAPI.Migrations
{
    [DbContext(typeof(ConferenceBookingContext))]
    [Migration("20241028034519_fix relationship")]
    partial class fixrelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConferenceBookingAPI.Model.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BookedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BookingEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("BookingStart")
                        .HasColumnType("time");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpectedAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Organizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ConferenceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InchargeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InchargeUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ConferenceId");

                    b.HasIndex("InchargeUserId1");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.ConferenceUser", b =>
                {
                    b.Property<int>("ConferenceUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceUserId"));

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConferenceUserId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UserId1");

                    b.ToTable("ConferenceUser");
                });

            modelBuilder.Entity("ConferenceBookingAPI.UserAuth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.Booking", b =>
                {
                    b.HasOne("ConferenceBookingAPI.Model.Conference", "Conference")
                        .WithMany("Bookings")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.Conference", b =>
                {
                    b.HasOne("ConferenceBookingAPI.UserAuth.ApplicationUser", "InchargeUser")
                        .WithMany()
                        .HasForeignKey("InchargeUserId1");

                    b.Navigation("InchargeUser");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.ConferenceUser", b =>
                {
                    b.HasOne("ConferenceBookingAPI.Model.Conference", "Conference")
                        .WithMany("ConferenceUsers")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("ConferenceBookingAPI.UserAuth.ApplicationUser", "User")
                        .WithMany("ConferenceUsers")
                        .HasForeignKey("UserId1");

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceBookingAPI.Model.Conference", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConferenceUsers");
                });

            modelBuilder.Entity("ConferenceBookingAPI.UserAuth.ApplicationUser", b =>
                {
                    b.Navigation("ConferenceUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
